import React, { useState, useEffect, useContext } from "react";
import {
  Card,
  Typography,
  Table,
  Button,
  Space,
  Tag,
  Select,
  Input,
  Modal,
  Form,
  Image,
} from "antd";
import { EditOutlined, EyeOutlined, PlusOutlined } from "@ant-design/icons";
import dayjs from "dayjs";
import { blogService } from "../../service/blog.service";
import { useSelector } from "react-redux";
import { NotificationContext } from "../../App";
import { authService } from "../../service/auth.service";

const { Title } = Typography;
const { Option } = Select;
const { Search } = Input;
const { TextArea } = Input;

/**
 * DOCTOR BLOG MANAGEMENT COMPONENT - QU·∫¢N L√ù BLOG C·ª¶A B√ÅC Sƒ®
 * 
 * Ch·ª©c nƒÉng ch√≠nh:
 * - B√°c sƒ© t·∫°o v√† qu·∫£n l√Ω blog c·ªßa m√¨nh
 * - Upload ·∫£nh cho blog v·ªõi compression t·ª± ƒë·ªông
 * - G·ª≠i b√†i vi·∫øt ƒëi duy·ªát
 * - Ch·ªânh s·ª≠a b√†i vi·∫øt nh√°p
 * 
 * Workflow:
 * 1. Load user info (b√°c sƒ© hi·ªán t·∫°i)
 * 2. Fetch blogs c·ªßa b√°c sƒ© n√†y
 * 3. Create/Edit blog v·ªõi form
 * 4. Upload image v·ªõi compression
 * 5. Submit for review
 */

// MAPPING TR·∫†NG TH√ÅI BLOG - ƒê·ªäNH NGHƒ®A M√ÄU S·∫ÆC V√Ä TEXT CHO T·ª™NG STATUS
const statusMap = {
  PENDING_REVIEW: { color: "orange", text: "Ch·ªù duy·ªát" },
  APPROVED: { color: "green", text: "ƒê√£ duy·ªát" },
  REJECTED: { color: "red", text: "ƒê√£ t·ª´ ch·ªëi" },
  DRAFT: { color: "blue", text: "B·∫£n nh√°p" },
  HIDDEN: { color: "#bfbfbf", text: "ƒê√£ ·∫©n" },
  all: { color: "default", text: "T·∫•t c·∫£" },
};

const DoctorBlogManagement = () => {
  // STATE MANAGEMENT - QU·∫¢N L√ù TR·∫†NG TH√ÅI COMPONENT
  const [myBlogs, setMyBlogs] = useState([]); // Danh s√°ch blog c·ªßa b√°c sƒ©
  const [loading, setLoading] = useState(false); // Loading khi fetch data
  const [actionLoading, setActionLoading] = useState(false); // Loading khi th·ª±c hi·ªán action
  const [filteredData, setFilteredData] = useState([]); // Data ƒë√£ ƒë∆∞·ª£c filter
  const [statusFilter, setStatusFilter] = useState("all"); // Filter theo status
  const [searchText, setSearchText] = useState(""); // Text t√¨m ki·∫øm
  const [selectedBlog, setSelectedBlog] = useState(null); // Blog ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ xem/s·ª≠a
  const [isModalVisible, setIsModalVisible] = useState(false); // Hi·ªÉn th·ªã modal
  const [modalType, setModalType] = useState(""); // Lo·∫°i modal: create, edit, view
  const [form] = Form.useForm(); // Form instance cho Ant Design
  const token = useSelector((state) => state.authSlice); // Token t·ª´ Redux store
  const { showNotification } = useContext(NotificationContext); // Context ƒë·ªÉ hi·ªÉn th·ªã notification
  const [currentUser, setCurrentUser] = useState(null); // Th√¥ng tin b√°c sƒ© hi·ªán t·∫°i
  
  // IMAGE UPLOAD STATES - TR·∫†NG TH√ÅI UPLOAD ·∫¢NH
  const [selectedFile, setSelectedFile] = useState(null); // File ·∫£nh ƒë∆∞·ª£c ch·ªçn
  const [preview, setPreview] = useState(null); // Preview ·∫£nh
  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false); // Modal upload ·∫£nh
  const [uploadingImage, setUploadingImage] = useState(false); // Loading khi upload
  
  // PAGINATION STATES - TR·∫†NG TH√ÅI PH√ÇN TRANG
  const [currentPage, setCurrentPage] = useState(0); // Trang hi·ªán t·∫°i (backend page = 0-based)
  const [totalPages, setTotalPages] = useState(1); // T·ªïng s·ªë trang

  // LOAD USER INFO - T·∫¢I TH√îNG TIN B√ÅC Sƒ® HI·ªÜN T·∫†I
  useEffect(() => {
    const loadUserInfo = async () => {
      try {
        if (token?.token) {
          const response = await authService.getMyInfo(token.token);
          setCurrentUser(response.data.result);
        }
      } catch (error) {
        console.error("Error loading user info:", error);
        showNotification("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng", "error");
      }
    };
    loadUserInfo();
  }, [token, showNotification]);

  // FETCH BLOGS WHEN USER LOADED - T·∫¢I BLOG KHI USER ƒê√É LOAD
  useEffect(() => {
    if (currentUser?.id) {
      fetchMyBlogs(currentUser.id);
    }
  }, [currentUser]);

     /**
    * FETCH MY BLOGS - L·∫§Y DANH S√ÅCH BLOG C·ª¶A B√ÅC Sƒ®
    * 
    * Quy tr√¨nh:
    * 1. G·ªçi API getAllBlogs v·ªõi pagination
    * 2. Filter blogs theo authorId/authorName/authorType
    * 3. L·∫•y chi ti·∫øt t·ª´ng blog ƒë·ªÉ c√≥ th√¥ng tin ƒë·∫ßy ƒë·ªß
    * 4. C·∫≠p nh·∫≠t state blogs v√† pagination
    * 
    * @param {string} authorId - ID c·ªßa b√°c sƒ©
    * @param {number} page - S·ªë trang (0-based)
    */
  const fetchMyBlogs = async (authorId, page = 0) => {
    try {
      setLoading(true);

      // G·ªåI API GET ALL BLOGS V·ªöI PAGINATION
      // S·ª≠ d·ª•ng getAllBlogs thay v√¨ getBlogsByAuthor v√¨ API getBlogsByAuthor c√≥ v·∫•n ƒë·ªÅ
      const response = await blogService.getAllBlogs({
        page,
        size: 9, // S·ªë l∆∞·ª£ng blog m·ªói trang
      });
      setCurrentPage(page);
      setTotalPages(response.data.result.totalPages);
      if (response.data && response.data.result?.content) {
        // FILTER BLOGS THEO AUTHORID HO·∫∂C AUTHORNAME
        const allBlogs = response.data.result.content;

        // L·∫§Y CHI TI·∫æT CHO T·ª™NG BLOG ƒê·ªÇ C√ì TH√îNG TIN AUTHOR ƒê·∫¶Y ƒê·ª¶
        // S·ª≠ d·ª•ng Promise.all ƒë·ªÉ g·ªçi song song nhi·ªÅu API
        const blogsWithDetails = await Promise.all(
          allBlogs.map(async (blog) => {
            try {
              const detailResponse = await blogService.getBlogById(blog.id);
              const blogDetail = detailResponse.data.result;

              // FALLBACK: N·∫æU KH√îNG C√ì AUTHORNAME, S·ª¨ D·ª§NG TH√îNG TIN USER HI·ªÜN T·∫†I
              if (!blogDetail.authorName && currentUser) {
                blogDetail.authorName =
                  currentUser.fullName || currentUser.username;
                blogDetail.authorType =
                  currentUser.role?.toUpperCase() || "DOCTOR";
              }

              return {
                ...blog,
                ...blogDetail,
              };
            } catch (error) {
              // FALLBACK: N·∫æU KH√îNG L·∫§Y ƒê∆Ø·ª¢C DETAIL, TH√äM TH√îNG TIN USER HI·ªÜN T·∫†I
              return {
                ...blog,
                authorName:
                  currentUser?.fullName || currentUser?.username || "N/A",
                authorType: currentUser?.role?.toUpperCase() || "DOCTOR",
              };
            }
          })
        );

        // FILTER BLOGS THEO AUTHOR
        const filteredBlogs = blogsWithDetails.filter((blog) => {
          // Ki·ªÉm tra theo authorId ho·∫∑c authorName
          const matchesAuthorId = blog.authorId === authorId;
          const matchesAuthorName =
            blog.authorName === currentUser?.fullName ||
            blog.authorName === currentUser?.username ||
            blog.authorName === `Dr. ${currentUser?.fullName}` ||
            blog.authorName === `Dr. ${currentUser?.username}` ||
            blog.authorName === currentUser?.name;

          // Ki·ªÉm tra theo authorType n·∫øu l√† DOCTOR
          const matchesAuthorType =
            blog.authorType === "DOCTOR" && currentUser?.role === "doctor";

          return matchesAuthorId || matchesAuthorName || matchesAuthorType;
        });

        // T·∫†M TH·ªúI HI·ªÇN TH·ªä T·∫§T C·∫¢ BLOGS ƒê·ªÇ DEBUG
        if (filteredBlogs.length === 0 && blogsWithDetails.length > 0) {
          setMyBlogs(blogsWithDetails);
        } else {
          setMyBlogs(filteredBlogs);
        }
      } else {
        setMyBlogs([]);
      }
    } catch (error) {
      console.error("Error fetching blogs:", error);
      setMyBlogs([]);
      showNotification("Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i vi·∫øt c·ªßa b·∫°n", "error");
    } finally {
      setLoading(false);
    }
  };

  /**
   * üîç FILTER & SEARCH - L·ªåC V√Ä T√åM KI·∫æM BLOG
   * 
   * Logic filter:
   * 1. Filter theo status (all, PENDING_REVIEW, APPROVED, etc.)
   * 2. Search theo title
   */
  useEffect(() => {
    const filtered = myBlogs.filter((blog) => {
      const matchesStatus =
        statusFilter === "all" ? true : blog.status === statusFilter;
      const matchesSearch = blog.title
        .toLowerCase()
        .includes(searchText.toLowerCase());
      return matchesStatus && matchesSearch;
    });
    setFilteredData(filtered);
  }, [myBlogs, statusFilter, searchText]);

  /**
   * üè∑Ô∏è GET STATUS TAG - T·∫†O TAG HI·ªÇN TH·ªä TR·∫†NG TH√ÅI
   * 
   * @param {string} status - Tr·∫°ng th√°i blog
   * @returns {JSX.Element} Tag component v·ªõi m√†u s·∫Øc t∆∞∆°ng ·ª©ng
   */
  const getStatusTag = (status) => {
    const statusInfo = statusMap[status];
    if (statusInfo) {
      return (
        <Tag color={statusInfo.color} style={{ fontWeight: 600 }}>
          {statusInfo.text}
        </Tag>
      );
    } else {
      return <Tag>Kh√¥ng x√°c ƒë·ªãnh</Tag>;
    }
  };

  /**
   * üÜï HANDLE CREATE BLOG - T·∫†O BLOG M·ªöI
   */
  const handleCreateBlog = () => {
    setSelectedBlog(null);
    setModalType("create");
    form.resetFields();
    setIsModalVisible(true);
  };

  /**
   * üëÅÔ∏è VIEW BLOG - XEM CHI TI·∫æT BLOG
   * 
   * @param {Object} blog - Blog object c·∫ßn xem
   */
  const viewBlog = (blog) => {
    setSelectedBlog(blog);
    setModalType("view");
    setIsModalVisible(true);
  };

  /**
   * üö´ HANDLE MODAL CANCEL - H·ª¶Y MODAL
   */
  const handleModalCancel = () => {
    setIsModalVisible(false);
    form.resetFields();
    setSelectedBlog(null);
    setModalType("");
  };

  /**
   * üíæ HANDLE SUBMIT - X·ª¨ L√ù T·∫†O/S·ª¨A BLOG
   * 
   * Workflow:
   * 1. Validate user info
   * 2. G·ªçi API create/update blog v·ªõi status DRAFT
   * 3. Hi·ªÉn th·ªã notification
   * 4. Refresh danh s√°ch
   */
  const handleSubmit = async (values) => {
    setActionLoading(true);
    try {
      if (modalType === "create") {
        // T·∫†O BLOG M·ªöI
        if (!currentUser || !currentUser.id) {
          showNotification(
            "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªÉ t·∫°o b√†i vi·∫øt.",
            "error"
          );
          return;
        }
        const response = await blogService.createBlog({
          title: values.title,
          content: values.content,
          sourceReference: values.sourceReference,
          status: "DRAFT", // T·∫°o d∆∞·ªõi d·∫°ng nh√°p
        });
        if (response.data) {
          showNotification("B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u d∆∞·ªõi d·∫°ng nh√°p!", "success");
          setIsModalVisible(false);
          form.resetFields();
          fetchMyBlogs(currentUser.id);
        }
              } else if (modalType === "edit") {
          // S·ª¨A BLOG
        if (!selectedBlog || !currentUser || !currentUser.id) {
          showNotification(
            "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b√†i vi·∫øt. Th√¥ng tin kh√¥ng ƒë·∫ßy ƒë·ªß.",
            "error"
          );
          return;
        }
        const updatedBlogData = {
          ...selectedBlog,
          ...values,
          status: "DRAFT", // L∆∞u d∆∞·ªõi d·∫°ng nh√°p
        };
        await blogService.updateBlog(selectedBlog.id, updatedBlogData);
        showNotification("B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u d∆∞·ªõi d·∫°ng nh√°p!", "success");
        setIsModalVisible(false);
        form.resetFields();
        fetchMyBlogs(currentUser.id);
      }
    } catch (error) {
      console.error("L·ªói khi x·ª≠ l√Ω b√†i vi·∫øt:", error);
      showNotification(
        error?.response?.data?.message || "X·ª≠ l√Ω b√†i vi·∫øt th·∫•t b·∫°i",
        "error"
      );
    } finally {
      setActionLoading(false);
    }
  };

  /**
   * üì§ HANDLE SEND FOR REVIEW - G·ª¨I B√ÄI VI·∫æT ƒêI DUY·ªÜT
   * 
   * Workflow:
   * 1. Validate user info
   * 2. G·ªçi API submitBlog ƒë·ªÉ g·ª≠i duy·ªát
   * 3. Hi·ªÉn th·ªã notification
   * 4. Refresh danh s√°ch
   */
  const handleSendForReview = async () => {
    setActionLoading(true);
    try {
      if (!selectedBlog || !currentUser || !currentUser.id) {
        showNotification(
          "Kh√¥ng th·ªÉ g·ª≠i duy·ªát. Th√¥ng tin kh√¥ng ƒë·∫ßy ƒë·ªß.",
          "error"
        );
        return;
      }
      const values = form.getFieldsValue();
      await blogService.submitBlog(selectedBlog.id, {
        title: values.title,
        content: values.content,
        sourceReference: values.sourceReference,
      });
      showNotification("B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c g·ª≠i duy·ªát th√†nh c√¥ng!", "success");
      setIsModalVisible(false);
      form.resetFields();
      fetchMyBlogs(currentUser.id);
    } catch (error) {
      showNotification(
        error?.response?.data?.message || "G·ª≠i duy·ªát b√†i vi·∫øt th·∫•t b·∫°i",
        "error"
      );
    } finally {
      setActionLoading(false);
    }
  };

  /**
   * üîç HANDLE SEARCH - X·ª¨ L√ù T√åM KI·∫æM
   * 
   * @param {string} value - Text t√¨m ki·∫øm
   */
  const handleSearch = (value) => {
    setSearchText(value);
  };

  /**
   * üìÅ HANDLE SELECT FILE - X·ª¨ L√ù CH·ªåN FILE ·∫¢NH
   * 
   * Quy tr√¨nh:
   * 1. Validate file type (ch·ªâ cho ph√©p image)
   * 2. Ki·ªÉm tra k√≠ch th∆∞·ªõc file (gi·ªõi h·∫°n 5MB)
   * 3. Compress ·∫£nh t·ª± ƒë·ªông
   * 4. T·∫°o preview
   * 
   * @param {Event} e - File input event
   */
  const handleSelectFile = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    try {
      // KI·ªÇM TRA LO·∫†I FILE
      if (!file.type.startsWith("image/")) {
        showNotification(
          error?.response?.data?.message || "Vui l√≤ng ch·ªçn file ·∫£nh",
          "error"
        );
        return;
      }

      // KI·ªÇM TRA K√çCH TH∆Ø·ªöC FILE (GI·ªöI H·∫†N 1MB CHO BACKEND)
      const maxSize = 1 * 1024 * 1024; // 1MB
      if (file.size > maxSize * 5) {
        // N·∫øu file > 5MB th√¨ t·ª´ ch·ªëi ngay
        showNotification(
          error?.response?.data?.message ||
            "File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 5MB",
          "error"
        );
        return;
      }

      // LU√îN COMPRESS ƒê·ªÇ ƒê·∫¢M B·∫¢O FILE NH·ªé H∆†N 1MB
      let compressedFile = await compressImage(file);

      // KI·ªÇM TRA L·∫†I SAU KHI COMPRESS
      if (compressedFile.size > maxSize) {
        showNotification(
          error?.response?.data?.message ||
            "File v·∫´n qu√° l·ªõn sau khi n√©n. Vui l√≤ng ch·ªçn file nh·ªè h∆°n.",
          "error"
        );
        return;
      }

      setSelectedFile(compressedFile);

      // T·∫†O PREVIEW
      const reader = new FileReader();
      reader.readAsDataURL(compressedFile);
      reader.onload = () => {
        setPreview(reader.result);
      };
    } catch (error) {
      console.error("Error processing file:", error);
      showNotification(
        error?.response?.data?.message || "L·ªói x·ª≠ l√Ω file. Vui l√≤ng th·ª≠ l·∫°i.",
        "error"
      );
    }
  };

  /**
   * üóúÔ∏è COMPRESS IMAGE - N√âN ·∫¢NH T·ª∞ ƒê·ªòNG
   * 
   * Quy tr√¨nh:
   * 1. T·∫°o canvas ƒë·ªÉ resize ·∫£nh
   * 2. Gi·∫£m k√≠ch th∆∞·ªõc xu·ªëng 600x400px
   * 3. Gi·∫£m quality xu·ªëng 60%
   * 4. Convert sang JPEG
   * 
   * @param {File} file - File ·∫£nh g·ªëc
   * @returns {Promise<File>} File ·∫£nh ƒë√£ n√©n
   */
  const compressImage = (file) => {
    return new Promise((resolve, reject) => {
      try {
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        const img = document.createElement("img"); // S·ª≠ d·ª•ng document.createElement thay v√¨ new Image()

        img.onload = () => {
          try {
            // T√çNH TO√ÅN K√çCH TH∆Ø·ªöC M·ªöI (GI·ªÆ T·ª∂ L·ªÜ, GI·∫¢M K√çCH TH∆Ø·ªöC)
            const maxWidth = 600; // Gi·∫£m t·ª´ 800 xu·ªëng 600
            const maxHeight = 400; // Gi·∫£m t·ª´ 600 xu·ªëng 400
            let { width, height } = img;

            if (width > height) {
              if (width > maxWidth) {
                height = (height * maxWidth) / width;
                width = maxWidth;
              }
            } else {
              if (height > maxHeight) {
                width = (width * maxHeight) / height;
                height = maxHeight;
              }
            }

            canvas.width = width;
            canvas.height = height;

            // V·∫º IMAGE ƒê√É RESIZE
            ctx.drawImage(img, 0, 0, width, height);

            // CONVERT TO BLOB V·ªöI QUALITY TH·∫§P H∆†N (0.6 THAY V√å 0.8)
            canvas.toBlob(
              (blob) => {
                if (blob) {
                  const compressedFile = new File([blob], file.name, {
                    type: "image/jpeg",
                    lastModified: Date.now(),
                  });
                  resolve(compressedFile);
                } else {
                  reject(new Error("Kh√¥ng th·ªÉ n√©n ·∫£nh"));
                }
              },
              "image/jpeg",
              0.6 // Gi·∫£m quality ƒë·ªÉ file nh·ªè h∆°n
            );
          } catch (error) {
            console.error("Error during image compression:", error);
            reject(error);
          }
        };

        img.onerror = () => {
          reject(new Error("Kh√¥ng th·ªÉ t·∫£i ·∫£nh"));
        };

        img.src = URL.createObjectURL(file);
      } catch (error) {
        console.error("Error creating image element:", error);
        reject(error);
      }
    });
  };

  /**
   * ‚úÖ HANDLE UPLOAD IMG - UPLOAD ·∫¢NH L√äN SERVER
   * 
   * Workflow:
   * 1. Validate file v√† blog
   * 2. G·ªçi API uploadBlogImage
   * 3. C·∫≠p nh·∫≠t blog v·ªõi ·∫£nh m·ªõi
   * 4. Refresh danh s√°ch
   */
  const handleUploadImg = async () => {
    if (!selectedFile || !selectedBlog?.id) return;
    setUploadingImage(true); // üî• Start loading

    try {
      const response = await blogService.uploadBlogImage(
        selectedBlog.id,
        selectedFile
      );

      if (response.data && response.data.result) {
        showNotification("Upload ·∫£nh th√†nh c√¥ng", "success");

        // C·∫¨P NH·∫¨T BLOG V·ªöI ·∫¢NH M·ªöI
        setSelectedBlog((prev) => ({
          ...prev,
          coverImageUrl: response.data.result.coverImageUrl,
        }));

        // REFRESH DANH S√ÅCH BLOGS
        fetchMyBlogs(currentUser.id);
      } else {
        showNotification("Upload ·∫£nh th·∫•t b·∫°i", "error");
      }

      // RESET TR·∫†NG TH√ÅI
      setSelectedFile(null);
      setIsUploadModalOpen(false);
      setPreview(null);
    } catch (error) {
      console.error("Upload error:", error);

      // üö® X·ª¨ L√ù C√ÅC LO·∫†I L·ªñI KH√ÅC NHAU
      if (error.code === "ERR_NETWORK") {
        showNotification("L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng th·ª≠ l·∫°i sau.", "error");
      } else if (error.message?.includes("CORS")) {
        showNotification(
          "L·ªói CORS. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c li√™n h·ªá admin.",
          "error"
        );
      } else if (error.response?.status === 413) {
        showNotification(
          "File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 1MB.",
          "error"
        );
      } else if (error.response?.status === 403) {
        showNotification("Kh√¥ng c√≥ quy·ªÅn upload ·∫£nh cho blog n√†y.", "error");
      } else if (error.response?.status === 401) {
        showNotification(
          "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
          "error"
        );
      } else if (error.response?.status === 0) {
        showNotification(
          "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra m·∫°ng.",
          "error"
        );
      } else {
        showNotification(
          error.response?.data?.message || "Upload ·∫£nh th·∫•t b·∫°i",
          "error"
        );
      }
    } finally {
      setUploadingImage(false); // üî• End loading
    }
  };

  // TABLE COLUMNS CONFIGURATION - C·∫§U H√åNH C·ªòT B·∫¢NG
  const columns = [
    {
      title: "H√¨nh ·∫£nh",
      key: "coverImageUrl",
      render: (_, record) => (
        <Image
          width={60}
          height={40}
          src={record.coverImageUrl || "/images/default-blog.jpg"}
          fallback="/images/default-blog.jpg"
          style={{ objectFit: "cover", borderRadius: "4px" }}
        />
      ),
    },
    {
      title: "Ti√™u ƒë·ªÅ",
      dataIndex: "title",
      key: "title",
      render: (title, record) => (
        <div>
          <div className="font-semibold">{title}</div>
          {record.featured && (
            <Tag color="gold" size="small">
              N·ªïi b·∫≠t
            </Tag>
          )}
        </div>
      ),
    },
    {
      title: "T√°c gi·∫£",
      dataIndex: "authorName",
      key: "authorName",
      render: (authorName, record) => {
        return (
          <div className="font-medium">
            {authorName || record.author || currentUser?.fullName || "N/A"}
            {record.authorType && (
              <div className="text-xs text-gray-500">
                {record.authorType === "DOCTOR"
                  ? "B√°c sƒ©"
                  : record.authorType === "CUSTOMER"
                  ? "Kh√°ch h√†ng"
                  : record.authorType === "MANAGER"
                  ? "Qu·∫£n l√Ω"
                  : record.authorType}
              </div>
            )}
          </div>
        );
      },
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      render: getStatusTag,
      filters: Object.keys(statusMap).map((key) => ({
        text: statusMap[key].text,
        value: key,
      })),
      onFilter: (value, record) => record.status === value,
    },
    {
      title: "Ng√†y t·∫°o",
      dataIndex: "createdAt",
      key: "createdAt",
      render: (date) => dayjs(date).format("DD/MM/YYYY"),
    },
    {
      title: "Thao t√°c",
      key: "action",
      render: (_, record) => (
        <Space direction="vertical" size="small">
          <Space wrap>
            <Button
              size="small"
              icon={<EyeOutlined />}
              onClick={() => viewBlog(record)}
            >
              Xem
            </Button>

            {/* üñºÔ∏è N√öT UPLOAD ·∫¢NH */}
            <Button
              size="small"
              style={{
                backgroundColor: "#FFA500",
                color: "white",
                border: "none",
              }}
              onClick={() => {
                setSelectedBlog(record); // üëà CH·ªåN BLOG
                setIsUploadModalOpen(true); // üëà M·ªû MODAL
              }}
            >
              Upload ·∫£nh
            </Button>
          </Space>
          <Space wrap>
            {/* ‚úèÔ∏è N√öT S·ª¨A BLOG */}
            <Button
              size="small"
              type="primary"
              icon={<EditOutlined />}
              onClick={() => {
                setSelectedBlog(record);
                setModalType("edit");
                form.setFieldsValue({
                  title: record.title,
                  content: record.content,
                  sourceReference: record.sourceReference,
                  featured: record.featured || false,
                });
                setIsModalVisible(true);
              }}
              loading={actionLoading}
            >
              S·ª≠a
            </Button>
          </Space>
        </Space>
      ),
    },
  ];

  return (
    <Card className="blog-management-card">
      {/* üîç FILTER & SEARCH SECTION */}
      <div className="flex justify-between items-center mb-4">
        <div className="flex gap-4">
          {/* üÜï N√öT T·∫†O BLOG */}
          <Button
            type="primary"
            icon={<PlusOutlined />}
            onClick={handleCreateBlog}
          >
            T·∫°o Blog
          </Button>
          {/* üìä STATUS FILTER */}
          <Select
            defaultValue="all"
            style={{ width: 120 }}
            onChange={setStatusFilter}
            value={statusFilter}
          >
            {Object.entries(statusMap).map(([key, value]) => (
              <Option key={key} value={key}>
                {value.text}
              </Option>
            ))}
          </Select>
          {/* üîç SEARCH INPUT */}
          <Search
            placeholder="T√¨m ki·∫øm b√†i vi·∫øt..."
            allowClear
            onSearch={handleSearch}
            style={{ width: 200 }}
          />
        </div>
      </div>

      {/* üìã BLOG TABLE */}
      <Table
        columns={columns}
        dataSource={filteredData}
        rowKey="id"
        loading={loading || actionLoading}
        pagination={false}
        scroll={{ x: 1000 }}
      />
      
      {/* üìÑ CUSTOM PAGINATION */}
      <div className="flex justify-end mt-4">
        <Button
          disabled={currentPage === 0}
          onClick={() => fetchMyBlogs(currentPage - 1)}
          className="mr-2"
        >
          Trang tr∆∞·ªõc
        </Button>
        <span className="px-4 py-1 bg-gray-100 rounded text-sm">
          Trang {currentPage + 1} / {totalPages}
        </span>
        <Button
          disabled={currentPage + 1 >= totalPages}
          onClick={() => fetchMyBlogs(currentPage + 1)}
          className="ml-2"
        >
          Trang ti·∫øp
        </Button>
      </div>

      {/* üëÅÔ∏è VIEW/EDIT BLOG MODAL */}
      <Modal
        title={
          modalType === "create"
            ? "T·∫°o b√†i vi·∫øt m·ªõi"
            : modalType === "edit"
            ? "Ch·ªânh s·ª≠a b√†i vi·∫øt"
            : "Xem b√†i vi·∫øt"
        }
        open={isModalVisible}
        onCancel={handleModalCancel}
        footer={
          modalType === "view"
            ? [
                <Button key="close" onClick={handleModalCancel}>
                  ƒê√≥ng
                </Button>,
              ]
            : [
                <Button key="back" onClick={handleModalCancel}>
                  H·ªßy
                </Button>,
                <Button
                  key="saveDraft"
                  onClick={() => form.submit()}
                  type="primary"
                  loading={actionLoading}
                >
                  L∆∞u
                </Button>,
                // CH·ªà HI·ªÇN TH·ªä N√öT G·ª¨I DUY·ªÜT CHO EDIT DRAFT
                ...(modalType === "edit" && selectedBlog?.status === "DRAFT" ? [
                  <Button
                    key="submitReview"
                    type="primary"
                    onClick={handleSendForReview}
                    loading={actionLoading}
                  >
                    G·ª≠i duy·ªát
                  </Button>
                ] : [])
              ]
        }
        width={800}
        destroyOnHidden
      >
        {modalType === "view" ? (
          // VIEW BLOG CONTENT
          selectedBlog && (
            <div>
              <h2 className="text-xl font-bold mb-4">{selectedBlog.title}</h2>
              <div className="mb-4">
                <p className="text-gray-600">
                  T√°c gi·∫£: {selectedBlog.authorName}
                </p>
                <p className="text-gray-600">
                  Ng√†y t·∫°o: {dayjs(selectedBlog.createdAt).format("DD/MM/YYYY")}
                </p>
                <p className="text-gray-600">
                  Tr·∫°ng th√°i: {getStatusTag(selectedBlog.status)}
                </p>
              </div>
              <div
                className="prose max-w-none"
                dangerouslySetInnerHTML={{ __html: selectedBlog.content }}
              ></div>
            </div>
          )
        ) : (
          // CREATE/EDIT BLOG FORM
          <Form
            form={form}
            layout="vertical"
            name="blog_form"
            onFinish={handleSubmit}
          >
            <Form.Item
              name="title"
              label="Ti√™u ƒë·ªÅ"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ!" }]}
            >
              <Input />
            </Form.Item>
            <Form.Item
              name="content"
              label="N·ªôi dung"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p n·ªôi dung!" }]}
            >
              <TextArea rows={10} />
            </Form.Item>
            <Form.Item name="sourceReference" label="Tham chi·∫øu ngu·ªìn">
              <Input />
            </Form.Item>
          </Form>
        )}
      </Modal>

      {/* üñºÔ∏è MODAL UPLOAD ·∫¢NH CHO BLOG */}
      <Modal
        title={`C·∫≠p nh·∫≠t ·∫£nh cho blog: ${selectedBlog?.title || ""}`}
        open={isUploadModalOpen}
        onCancel={() => {
          setIsUploadModalOpen(false);
          setSelectedFile(null);
          setPreview(null);
        }}
        footer={null}
        destroyOnHidden
      >
        <div className="text-center">
          <h3 className="text-xl font-semibold mb-4">·∫¢nh blog</h3>
          <img
            src={preview || selectedBlog?.image || "/default-blog.jpg"}
            alt="Avatar Preview"
            className="w-32 h-32 rounded-full object-cover border mx-auto mb-4"
          />
          <label
            htmlFor="fileInput"
            className="cursor-pointer bg-gray-200 px-4 py-1 rounded hover:bg-gray-300 transition inline-block"
          >
            Ch·ªçn ·∫£nh
          </label>
          <input
            type="file"
            id="fileInput"
            onChange={handleSelectFile}
            className="hidden"
          />
          <p className="text-sm text-gray-600 mt-2">
            {selectedFile ? (
              <span>
                {selectedFile.name} ({Math.round(selectedFile.size / 1024)}KB)
                <br />
                <span className="text-xs text-gray-500">
                  Gi·ªõi h·∫°n: 1MB, T·ª± ƒë·ªông n√©n ·∫£nh (600x400px, quality 60%)
                </span>
              </span>
            ) : (
              "Ch∆∞a ch·ªçn ·∫£nh n√†o"
            )}
          </p>
          <Button
            type="primary"
            loading={uploadingImage}
            disabled={!selectedFile}
            onClick={handleUploadImg}
            className="mt-3"
          >
            {uploadingImage ? "ƒêang upload..." : "L∆∞u ·∫£nh"}
          </Button>
        </div>
      </Modal>
    </Card>
  );
};

export default DoctorBlogManagement;
