import React, { useState, useEffect } from "react";
import { 
  Card, Table, Button, Space, Tag, Modal, Descriptions, 
  Row, Col, Input, Select, Typography, notification, Drawer,
  Collapse
} from "antd";
import {
  UserOutlined, EyeOutlined, DownOutlined, UpOutlined,
  CalendarOutlined, FileTextOutlined, MedicineBoxOutlined,
  CheckOutlined, CloseOutlined
} from "@ant-design/icons";
import dayjs from "dayjs";
import { treatmentService } from "../../service/treatment.service";
import { authService } from "../../service/auth.service";
import { useNavigate } from "react-router-dom";

const { Search } = Input;
const { Option } = Select;
const { Title, Text } = Typography;
const { Panel } = Collapse;

const TestResults = () => {
  const [selectedRecord, setSelectedRecord] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [searchText, setSearchText] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [records, setRecords] = useState([]);
  const [doctorId, setDoctorId] = useState("");
  const navigate = useNavigate();
  const [expandedRows, setExpandedRows] = useState([]);

  useEffect(() => {
    const fetchDoctorInfo = async () => {
      try {
        const res = await authService.getMyInfo();
        const id = res?.data?.result?.id;
        if (id) {
          setDoctorId(id);
        } else {
          notification.error({
            message: "L·ªói",
            description: "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin b√°c sƒ©"
          });
        }
      } catch (error) {
        notification.error({
          message: "L·ªói",
          description: "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin b√°c sƒ©"
        });
      }
    };
    fetchDoctorInfo();
  }, []);

  useEffect(() => {
    if (!doctorId) return;

    const fetchRecords = async () => {
      try {
        // S·ª≠ d·ª•ng API m·ªõi v1/treatment-records
        const result = await treatmentService.getTreatmentRecords({
          doctorId: doctorId,
          page: 0,
          size: 100
        });
        
        console.log('üìã Treatment Records API response:', result);
        
        // ƒê·∫£m b·∫£o result l√† array t·ª´ content
        let treatmentRecords = [];
        if (result?.data?.result?.content) {
          treatmentRecords = result.data.result.content;
        } else if (Array.isArray(result?.data?.result)) {
          treatmentRecords = result.data.result;
        } else if (Array.isArray(result)) {
          treatmentRecords = result;
        }
        
        console.log('üìã Processed Treatment Records:', treatmentRecords);
        
        if (treatmentRecords && treatmentRecords.length > 0) {
          // Nh√≥m c√°c records theo customerName thay v√¨ customerId
          const groupedByCustomer = treatmentRecords.reduce((acc, record) => {
            const customerName = record.customerName;
            if (!acc[customerName]) {
              acc[customerName] = [];
            }
            acc[customerName].push(record);
            return acc;
          }, {});

          // Chuy·ªÉn ƒë·ªïi th√†nh m·∫£ng v√† s·∫Øp x·∫øp
          const formattedRecords = Object.entries(groupedByCustomer).map(([customerName, treatments]) => {
            // S·∫Øp x·∫øp treatments theo ng√†y b·∫Øt ƒë·∫ßu m·ªõi nh·∫•t
            const sortedTreatments = treatments.sort((a, b) => 
              new Date(b.startDate) - new Date(a.startDate)
            );
            
            return {
              key: customerName, // S·ª≠ d·ª•ng customerName l√†m key
              customerId: sortedTreatments[0].customerId, // L·∫•y customerId t·ª´ treatment ƒë·∫ßu ti√™n
              customerName: customerName,
              treatments: sortedTreatments.map(treatment => ({
                ...treatment,
                key: treatment.id
              }))
            };
          });

          console.log('‚úÖ Formatted Records:', formattedRecords);
          setRecords(formattedRecords);
        } else {
          console.log('‚ö†Ô∏è No treatment records found');
          setRecords([]);
        }
      } catch (error) {
        console.error('‚ùå Error fetching records:', error);
        notification.error({
          message: "L·ªói",
          description: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒëi·ªÅu tr·ªã"
        });
        setRecords([]);
      }
    };

    fetchRecords();
  }, [doctorId]);

  const getStatusTag = (status) => {
    const statusMap = {
      PENDING: { color: "orange", text: "ƒêang ch·ªù x·ª≠ l√Ω" },
      INPROGRESS: { color: "blue", text: "ƒêang ƒëi·ªÅu tr·ªã" },
      CANCELLED: { color: "red", text: "ƒê√£ h·ªßy" },
      COMPLETED: { color: "green", text: "Ho√†n th√†nh" }
    };
    return <Tag color={statusMap[status]?.color}>{statusMap[status]?.text}</Tag>;
  };

  const viewRecord = (record) => {
    navigate("/doctor-dashboard/treatment-stages", {
      state: {
        patientInfo: {
          customerId: record.customerId,
          customerName: record.customerName,
        },
        treatmentData: record,
        sourcePage: "test-results"
      },
    });
  };

  const handleApprove = async (treatment) => {
    try {
      const response = await treatmentService.updateTreatmentRecordStatus(treatment.id, "INPROGRESS");
      if (response?.data?.code === 1000) {
        notification.success({
          message: "Duy·ªát h·ªì s∆° th√†nh c√¥ng!",
          description: `H·ªì s∆° c·ªßa b·ªánh nh√¢n ${treatment.customerName} ƒë√£ chuy·ªÉn sang tr·∫°ng th√°i 'ƒêang ƒëi·ªÅu tr·ªã'.`,
        });
        // Refresh the list using new API
        const updatedRecords = await treatmentService.getTreatmentRecords({
          doctorId: doctorId,
          page: 0,
          size: 100
        });
        
        if (updatedRecords?.data?.result?.content) {
          const treatmentRecords = updatedRecords.data.result.content;
          
          const groupedByCustomer = treatmentRecords.reduce((acc, record) => {
            const customerName = record.customerName;
            if (!acc[customerName]) {
              acc[customerName] = [];
            }
            acc[customerName].push(record);
            return acc;
          }, {});

          const formattedRecords = Object.entries(groupedByCustomer).map(([customerName, treatments]) => {
            const sortedTreatments = treatments.sort((a, b) => 
              new Date(b.startDate) - new Date(a.startDate)
            );
            
            return {
              key: customerName,
              customerId: sortedTreatments[0].customerId,
              customerName: customerName,
              treatments: sortedTreatments.map(treatment => ({
                ...treatment,
                key: treatment.id
              }))
            };
          });

          setRecords(formattedRecords);
        }
      } else {
        notification.error({
          message: "Duy·ªát h·ªì s∆° th·∫•t b·∫°i!",
          description: response?.data?.message || "Kh√¥ng th·ªÉ duy·ªát h·ªì s∆°, vui l√≤ng th·ª≠ l·∫°i.",
        });
      }
    } catch (error) {
      notification.error({
        message: "L·ªói khi duy·ªát h·ªì s∆°!",
        description: error.message || "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i.",
      });
    }
  };

  const handleCancel = async (treatment) => {
    try {
      const response = await treatmentService.updateTreatmentRecordStatus(treatment.id, "CANCELLED");
      if (response?.data?.code === 1000) {
        notification.success({
          message: "H·ªßy h·ªì s∆° th√†nh c√¥ng!",
          description: `H·ªì s∆° c·ªßa b·ªánh nh√¢n ${treatment.customerName} ƒë√£ ƒë∆∞·ª£c h·ªßy.`,
        });
        // Refresh the list using new API
        const updatedRecords = await treatmentService.getTreatmentRecords({
          doctorId: doctorId,
          page: 0,
          size: 100
        });
        
        if (updatedRecords?.data?.result?.content) {
          const treatmentRecords = updatedRecords.data.result.content;
          
          const groupedByCustomer = treatmentRecords.reduce((acc, record) => {
            const customerName = record.customerName;
            if (!acc[customerName]) {
              acc[customerName] = [];
            }
            acc[customerName].push(record);
            return acc;
          }, {});

          const formattedRecords = Object.entries(groupedByCustomer).map(([customerName, treatments]) => {
            const sortedTreatments = treatments.sort((a, b) => 
              new Date(b.startDate) - new Date(a.startDate)
            );
            
            return {
              key: customerName,
              customerId: sortedTreatments[0].customerId,
              customerName: customerName,
              treatments: sortedTreatments.map(treatment => ({
                ...treatment,
                key: treatment.id
              }))
            };
          });

          setRecords(formattedRecords);
        }
      } else {
        notification.error({
          message: "H·ªßy h·ªì s∆° th·∫•t b·∫°i!",
          description: response?.data?.message || "Kh√¥ng th·ªÉ h·ªßy h·ªì s∆°, vui l√≤ng th·ª≠ l·∫°i.",
        });
      }
    } catch (error) {
      notification.error({
        message: "L·ªói khi h·ªßy h·ªì s∆°!",
        description: error.message || "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i.",
      });
    }
  };

  const expandedRowRender = (record) => {
    const columns = [
      {
        title: 'D·ªãch v·ª•',
        dataIndex: 'serviceName',
        key: 'serviceName',
        render: (text) => (
          <Space>
            <MedicineBoxOutlined style={{ color: '#722ed1' }} />
            <Text strong>{text}</Text>
          </Space>
        )
      },
      {
        title: 'Ng√†y b·∫Øt ƒë·∫ßu',
        dataIndex: 'startDate',
        key: 'startDate',
        render: (date) => (
          <Space>
            <CalendarOutlined />
            {dayjs(date).format("DD/MM/YYYY")}
          </Space>
        )
      },
      {
        title: 'Ti·∫øn ƒë·ªô',
        key: 'progress',
        render: (_, treatment) => (
          <Space>
            <Text type="secondary">
              {treatment.completedSteps}/{treatment.totalSteps} b∆∞·ªõc
            </Text>
          </Space>
        )
      },
      {
        title: 'Tr·∫°ng th√°i',
        dataIndex: 'status',
        key: 'status',
        render: (status) => getStatusTag(status)
      },
      {
        title: 'Thao t√°c',
        key: 'action',
        render: (_, treatment) => (
          <Space>
            <Button
              type="primary"
              size="small"
              icon={<EyeOutlined />}
              onClick={() => viewRecord(treatment)}
            >
              Xem chi ti·∫øt
            </Button>
            {treatment.status === "PENDING" && (
              <>
                <Button
                  type="primary"
                  size="small"
                  icon={<CheckOutlined />}
                  onClick={() => handleApprove(treatment)}
                  style={{ background: '#52c41a', borderColor: '#52c41a' }}
                >
                  Duy·ªát
                </Button>
                <Button
                  danger
                  size="small"
                  icon={<CloseOutlined />}
                  onClick={() => handleCancel(treatment)}
                >
                  H·ªßy
                </Button>
              </>
            )}
          </Space>
        )
      }
    ];

    return (
      <Card bordered={false} style={{ marginBottom: 16 }}>
        <Table
          columns={columns}
          dataSource={record.treatments}
          pagination={false}
          size="small"
        />
      </Card>
    );
  };

  const columns = [
    {
      title: "B·ªánh nh√¢n",
      dataIndex: "customerName",
      key: "customerName",
      render: (name) => (
        <Space>
          <UserOutlined style={{ color: '#1890ff' }} />
          <Text strong>{name}</Text>
        </Space>
      )
    },
    {
      title: "S·ªë d·ªãch v·ª•",
      key: "treatmentCount",
      render: (_, record) => (
        <Tag color="blue">{record.treatments.length} d·ªãch v·ª•</Tag>
      )
    },
    {
      title: "Chi ti·∫øt",
      key: "expand",
      render: (_, record) => (
        <Button
          type="text"
          icon={expandedRows.includes(record.key) ? <UpOutlined /> : <DownOutlined />}
          onClick={() => {
            const newExpandedRows = expandedRows.includes(record.key)
              ? expandedRows.filter(key => key !== record.key)
              : [...expandedRows, record.key];
            setExpandedRows(newExpandedRows);
          }}
        >
          {expandedRows.includes(record.key) ? 'Thu g·ªçn' : 'Xem th√™m'}
        </Button>
      )
    }
  ];

  return (
    <div style={{ padding: '24px' }}>
      <Card>
        <Title level={3}>
          <Space>
            <FileTextOutlined />
            H·ªì s∆° b·ªánh nh√¢n 
          </Space>
        </Title>

        <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>
          <Col xs={24} sm={12} md={8}>
            <Search
              placeholder="T√¨m ki·∫øm theo t√™n b·ªánh nh√¢n"
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
              style={{ width: '100%' }}
            />
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Select
              style={{ width: '100%' }}
              value={statusFilter}
              onChange={setStatusFilter}
              placeholder="L·ªçc theo tr·∫°ng th√°i"
            >
              <Option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</Option>
              <Option value="PENDING">ƒêang ch·ªù x·ª≠ l√Ω</Option>
              <Option value="INPROGRESS">ƒêang ƒëi·ªÅu tr·ªã</Option>
              <Option value="COMPLETED">Ho√†n th√†nh</Option>
              <Option value="CANCELLED">ƒê√£ h·ªßy</Option>
            </Select>
          </Col>
        </Row>

        <Table
          dataSource={records.filter(record => {
            const matchesSearch = record.customerName.toLowerCase().includes(searchText.toLowerCase());
            const matchesStatus = statusFilter === 'all' || 
              record.treatments.some(t => t.status === statusFilter);
            return matchesSearch && matchesStatus;
          })}
          columns={columns}
          expandable={{
            expandedRowRender,
            expandedRowKeys: expandedRows,
            onExpand: (expanded, record) => {
              const newExpandedRows = expanded
                ? [...expandedRows, record.key]
                : expandedRows.filter(key => key !== record.key);
              setExpandedRows(newExpandedRows);
            }
          }}
          pagination={{ pageSize: 10 }}
        />
      </Card>
    </div>
  );
};

export default TestResults; 