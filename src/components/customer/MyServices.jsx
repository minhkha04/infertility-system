import React, { useState, useEffect, useContext } from "react";
import {
  Card,
  Table,
  Tag,
  Typography,
  Row,
  Col,
  Statistic,
  Spin,
  Button,
} from "antd";
import {
  ExperimentOutlined,
  CheckCircleOutlined,
  ClockCircleOutlined,
  UserOutlined,
  CalendarOutlined,
  CloseCircleOutlined,
  EyeOutlined,
} from "@ant-design/icons";
import dayjs from "dayjs";
import { treatmentService } from "../../service/treatment.service";
import { authService } from "../../service/auth.service";
import { useNavigate } from "react-router-dom";
import { customerService } from "../../service/customer.service";
import { path } from "../../common/path";
import { NotificationContext } from "../../App";

const { Title, Text } = Typography;

const MyServices = () => {
  const { showNotification } = useContext(NotificationContext);
  const [loading, setLoading] = useState(true);
  const [treatmentRecords, setTreatmentRecords] = useState([]);
  const [statistics, setStatistics] = useState({
    totalServices: 0,
    cancelledServices: 0,
    inProgressServices: 0,
  });
  const [cancelLoading, setCancelLoading] = useState({});
  const [userId, setUserId] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    fetchTreatmentRecords();
    const fetchUser = async () => {
      try {
        const res = await authService.getMyInfo();
        setUserId(res?.data?.result?.id);
      } catch {}
    };
    fetchUser();
  }, []);

  const fetchTreatmentRecords = async () => {
    try {
      setLoading(true);
      const userResponse = await authService.getMyInfo();

      if (!userResponse?.data?.result?.id) {
        showNotification("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng", "error");
        return;
      }

      const customerId = userResponse.data.result.id;

      // T·∫°m th·ªùi cho ph√©p s·ª≠ d·ª•ng test data
      if (!customerId) {
        showNotification(
          "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
          "error"
        );
        return;
      }

      // C·∫£nh b√°o n·∫øu ƒëang s·ª≠ d·ª•ng test data
      // (ƒê√£ x√≥a th√¥ng b√°o demo, ch·ªâ d√πng d·ªØ li·ªáu th·∫≠t)

      const response = await treatmentService.getTreatmentRecords({
        customerId: customerId,
        page: 0,
        size: 100,
      });

      if (response?.data?.result?.content) {
        const records = response.data.result.content;
        console.log(records);

        // ch·ªâ cho nh·∫•n feedback khi ƒë√£ ho√†n th√†nh h·ªì s∆° ƒëi·ªÅu tr·ªã
        const enrichedRecords = records.map((record) => ({
          ...record,
          canFeedback: record.status === "COMPLETED",
        }));
        setTreatmentRecords(enrichedRecords);

        const stats = {
          totalServices: records.length,
          cancelledServices: records.filter((r) => r.status === "CANCELLED")
            .length,
          inProgressServices: records.filter((r) => r.status === "INPROGRESS")
            .length,
        };
        setStatistics(stats);
      }
    } catch (error) {
      console.error("Error fetching treatment records:", error);
      showNotification("C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu", "error");
    } finally {
      setLoading(false);
    }
  };

  const getStatusTag = (status) => {
    switch (status) {
      case "COMPLETED":
        return <Tag color="success">Ho√†n th√†nh</Tag>;
      case "INPROGRESS":
        return <Tag color="#1890ff">ƒêang ƒëi·ªÅu tr·ªã</Tag>;
      case "PENDING":
        return <Tag color="warning">ƒêang ch·ªù ƒëi·ªÅu tr·ªã</Tag>;
      case "CANCELLED":
        return <Tag color="error">ƒê√£ h·ªßy</Tag>;
      default:
        return <Tag color="default">{status}</Tag>;
    }
  };

  const handleCancelTreatment = async (record) => {
    if (!userId) return;
    setCancelLoading((l) => ({ ...l, [record.id]: true }));
    try {
      await treatmentService.cancelTreatmentRecord(record.id);
      showNotification("H·ªßy h·ªì s∆° ƒëi·ªÅu tr·ªã th√†nh c√¥ng.", "success");
      fetchTreatmentRecords();
    } catch (err) {
      const errorMessage =
        err?.response?.data?.message || "Kh√¥ng th·ªÉ h·ªßy h·ªì s∆° ƒëi·ªÅu tr·ªã n√†y.";
      if (errorMessage.includes("in progress")) {
        showNotification(
          "H·ªßy th·∫•t b·∫°i do b·∫°n ƒëang trong qu√° tr√¨nh ƒëi·ªÅu tr·ªã.",
          "error"
        );
      } else if (errorMessage.includes("completed")) {
        showNotification("H·ªßy th·∫•t b·∫°i do d·ªãch v·ª• ƒë√£ ho√†n th√†nh.", "error");
      } else {
        showNotification(errorMessage, "error");
      }
    } finally {
      setCancelLoading((l) => ({ ...l, [record.id]: false }));
    }
  };

  const handleOpenFeedbackForm = (record) => {
    if (!record.canFeedback) return;
    navigate(path.customerFeedback, {
      state: {
        recordId: record.id,
      },
    });
  };

  const handleViewTreatmentProgress = (record) => {
    console.log("üëâ [MyServices] Chuy·ªÉn sang TreatmentProgress v·ªõi:", record);
    navigate(path.customerTreatment, {
      state: {
        treatmentRecord: record,
        treatmentId: record.id,
      },
    });
  };

  const columns = [
    {
      title: "G√≥i ƒëi·ªÅu tr·ªã",
      dataIndex: "serviceName",
      key: "serviceName",
      render: (text) => <span>{text || "N/A"}</span>,
    },
    {
      title: "B√°c sƒ© ph·ª• tr√°ch",
      dataIndex: "doctorName",
      key: "doctorName",
      render: (text) => <span>{text || "N/A"}</span>,
    },
    {
      title: "Ng√†y b·∫Øt ƒë·∫ßu",
      dataIndex: "startDate",
      key: "startDate",
      render: (text) => (
        <span>{text ? new Date(text).toLocaleDateString("vi-VN") : "N/A"}</span>
      ),
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      render: (status, record) => getStatusTag(status),
    },
    {
      title: "Ti·∫øn ƒë·ªô",
      dataIndex: "progress",
      key: "progress",
      render: (_, record) => {
        const totalSteps = record.totalSteps || 0;
        const completedSteps = record.completedSteps || 0;

        if (!totalSteps) return "0%";
        const percentage = Math.round((completedSteps / totalSteps) * 100);
        return `${completedSteps}/${totalSteps} (${percentage}%)`;
      },
    },
    {
      title: "Chi ti·∫øt d·ªãch v·ª•",
      key: "details",
      render: (_, record) => (
        <Button
          type="primary"
          icon={<EyeOutlined />}
          style={{
            backgroundColor: "#ff6b35",
            borderColor: "#ff6b35",
            color: "#fff",
          }}
          onClick={(e) => {
            e.stopPropagation();
            handleViewTreatmentProgress(record);
          }}
        >
          Xem
        </Button>
      ),
    },
    {
      title: "Y√™u c·∫ßu h·ªßy",
      key: "cancel",
      render: (_, record) => (
        <Button
          danger
          loading={!!cancelLoading[record.id]}
          onClick={(e) => {
            e.stopPropagation();
            handleCancelTreatment(record);
          }}
          disabled={!userId || record.status === "CANCELLED"}
          style={
            record.status === "CANCELLED"
              ? { opacity: 0.5, cursor: "not-allowed" }
              : {}
          }
        >
          H·ªßy d·ªãch v·ª•
        </Button>
      ),
    },
    {
      title: "T·∫°o feedback",
      key: "feedback",
      render: (_, record) => (
        <Button
          type="primary"
          onClick={(e) => {
            e.stopPropagation();
            handleOpenFeedbackForm(record);
            console.log(record.id);
          }}
          disabled={!record.canFeedback}
        >
          Feedback
        </Button>
      ),
    },
  ];

  if (loading) {
    return (
      <div style={{ textAlign: "center", padding: "50px" }}>
        <Spin size="large" />
      </div>
    );
  }

  return (
    <div style={{ padding: "24px", background: "#f0f2f5", minHeight: "100vh" }}>
      <Title
        level={4}
        style={{
          marginBottom: 24,
          color: "#1890ff",
          fontWeight: 700,
          letterSpacing: 1,
        }}
      >
        D·ªãch v·ª• c·ªßa t√¥i
      </Title>

      <Row gutter={32} style={{ marginBottom: 32, justifyContent: "center" }}>
        <Col xs={24} sm={8}>
          <Card
            variant="outlined"
            style={{
              borderRadius: 16,
              boxShadow: "0 4px 16px rgba(24,144,255,0.08)",
              background: "#fff",
            }}
          >
            <Statistic
              title={
                <span style={{ color: "#1890ff", fontWeight: 600 }}>
                  T·ªïng s·ªë d·ªãch v·ª•
                </span>
              }
              value={statistics.totalServices}
              prefix={<ExperimentOutlined style={{ color: "#1890ff" }} />}
              valueStyle={{ fontSize: 32, color: "#1890ff", fontWeight: 700 }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={8}>
          <Card
            variant="outlined"
            style={{
              borderRadius: 16,
              boxShadow: "0 4px 16px rgba(255,77,79,0.08)",
              background: "#fff",
            }}
          >
            <Statistic
              title={
                <span style={{ color: "#ff4d4f", fontWeight: 600 }}>
                  ƒê√£ h·ªßy
                </span>
              }
              value={statistics.cancelledServices}
              prefix={<CloseCircleOutlined style={{ color: "#ff4d4f" }} />}
              valueStyle={{ fontSize: 32, color: "#ff4d4f", fontWeight: 700 }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={8}>
          <Card
            variant="outlined"
            style={{
              borderRadius: 16,
              boxShadow: "0 4px 16px rgba(24,144,255,0.08)",
              background: "#fff",
            }}
          >
            <Statistic
              title={
                <span style={{ color: "#1890ff", fontWeight: 600 }}>
                  ƒêang th·ª±c hi·ªán
                </span>
              }
              value={statistics.inProgressServices}
              prefix={<CheckCircleOutlined style={{ color: "#1890ff" }} />}
              valueStyle={{ fontSize: 32, color: "#1890ff", fontWeight: 700 }}
            />
          </Card>
        </Col>
      </Row>

      <Card
        variant="outlined"
        style={{
          borderRadius: 16,
          boxShadow: "0 2px 8px rgba(24,144,255,0.06)",
          background: "#fff",
        }}
      >
        <Table
          columns={columns}
          dataSource={treatmentRecords}
          rowKey="id"
          pagination={{
            pageSize: 5,
            showSizeChanger: false,
            showTotal: (total) => `T·ªïng s·ªë ${total} d·ªãch v·ª•`,
          }}
          bordered
          style={{ borderRadius: 12, overflow: "hidden" }}
        />
      </Card>
    </div>
  );
};

export default MyServices;
